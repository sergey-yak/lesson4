#1. Проанализировать скорость и сложность одного любого алгоритма, разработанных в рамках
# домашнего задания первых трех уроков.
#Примечание: попробуйте написать несколько реализаций алгоритма и сравнить их.

#. Рассмотрим два разных случая, когда в программе генерируется случайное целое число от 0 до 100.
# Пользователь должен его отгадать не более чем за 10 попыток.
# После каждой неудачной попытки должно сообщаться больше или меньше введенное пользователем число,
# чем то, что загадано. Если за 10 попыток число не отгадано, то вывести загаданное число.

#В первом случае:

from random import random
n = round(random() * 100)
i = 1
print("Компьютер загадал число. Отгадайте его. У вас 10 попыток")
while i <= 10:
    u = int(input(str(i) + '-я попытка: '))
    if u > n:
        print('Много')
    elif u < n:
        print('Мало')
    else:
        print('Вы угадали с %d-й попытки' % i)
        break
    i += 1
else:
    print('Вы исчерпали 10 попыток. Было загадано', n)

# Результаты по первому варианту:

#   8 function calls in 0.094 seconds

#   Ordered by: standard name

#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#        1    0.000    0.000    0.093    0.093 <string>:1(<module>)
#        1    0.093    0.093    0.093    0.093 Profile.py:15(cycle)
#        1    0.000    0.000    0.093    0.093 Profile.py:22(main)
#        1    0.000    0.000    0.000    0.000 Profile.py:4(get_count)
#        1    0.000    0.000    0.000    0.000 Profile.py:8(get_sum)
#        1    0.000    0.000    0.094    0.094 {built-in method builtins.exec}
#        1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}


#Process finished with exit code 0

#Во втором случае

import random

a = random.randint(0, 100)
b = int(input('Угадайте число от 1 до 100:'))
attempt = 10

while attempt != 0:
    if a == b:
        print('Вы угадали!')
        exit(0)
    elif a > b:
        print(f'Число больше чем {b}')
        attempt -=1
        b = int (input(f'У вас больше попыток {attempt}, введите число: '))
    else:
        print(f'Число меньше чем {b}')
        attempt -= 1
        b = int(input(f'У вас больше попыток {attempt}, введите число: '))
print(f'Вы проиграли, это было {a}')

#Результаты по второму варианту:

#         8 function calls in 0.086 seconds

#   Ordered by: standard name

#   ncalls  tottime  percall  cumtime  percall filename:lineno(function)
#        1    0.000    0.000    0.086    0.086 <string>:1(<module>)
#        1    0.086    0.086    0.086    0.086 Profile.py:15(cycle)
#        1    0.000    0.000    0.086    0.086 Profile.py:22(main)
#        1    0.000    0.000    0.000    0.000 Profile.py:4(get_count)
#        1    0.000    0.000    0.000    0.000 Profile.py:8(get_sum)
#        1    0.000    0.000    0.086    0.086 {built-in method builtins.exec}
#        1    0.000    0.000    0.000    0.000 {built-in method builtins.len}
#        1    0.000    0.000    0.000    0.000 {method 'disable' of '_lsprof.Profiler' objects}

#Process finished with exit code 0

#Вывод: Первый алгоритм является более сложным нежели второй, поскольку время на выполнение операции
# по нему затрачивается больше.   
